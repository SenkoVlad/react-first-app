{"version":3,"sources":["components/Profile/ProfileInfo/ProfileInfo.module.css","components/Profile/Profile.module.css","components/Profile/Posts/Posts.module.css","components/Profile/Posts/Post/Post.module.css","components/Profile/ProfileInfo/ProfileStatusInfoWIthHook.js","components/Profile/ProfileInfo/ProfileDataForm.js","components/Profile/ProfileInfo/ProfileInfo.js","components/Profile/Posts/Post/Post.js","components/Profile/Posts/Posts.js","components/Profile/Posts/PostsContainer.js","components/Profile/ProfileContainer.js"],"names":["module","exports","ProfileStatusInfoWithHook","props","useState","status","setStatus","editMode","setEditMode","useEffect","changeEditMode","flag","updateUserStatus","onDoubleClick","onChange","e","currentTarget","value","onBlur","autoFocus","reduxForm","form","handleSubmit","initialValues","error","onSubmit","Field","component","Input","placeholder","id","name","validate","type","className","css","contactsBlock","Object","keys","userContacts","map","key","errorBlock","Contact","site","url","ProfileData","profileInfo","isOwner","location","country","city","IsLookingForAJob","isLookingForAJob","ResumeText","onClick","ProfileInfo","isEditMode","whiteText","src","photoUrl","avatar","userPhoto","saveAvatar","files","fileChoosen","profileGeneralInfo","formdata","result","saveUser","Promise","all","then","Post","item","text","likes","maxLength10","maxLengthCreator","ReduxPostForm","Textarea","required","Posts","React","memo","posts","addPost","postElements","post","formData","newposttext","paddingTop10","PostsContainer","connect","state","profilePage","dispatch","newPostActionCreator","ProfileContainer","this","getCurrentUserId","history","push","profile","isLoading","Preloader","content","match","params","userId","a","getUserProfile","loadUserProfile","setUsersProfile","Component","compose","withRouter","auth"],"mappings":"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","file":"static/js/3.d0098876.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"userPhoto\":\"ProfileInfo_userPhoto__NyjsD\",\"whiteText\":\"ProfileInfo_whiteText__RUSFa\",\"contactsBlock\":\"ProfileInfo_contactsBlock__Pbwqo\",\"profileGeneralInfo\":\"ProfileInfo_profileGeneralInfo__1Kvy5\",\"errorBlock\":\"ProfileInfo_errorBlock__2vfG6\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"content\":\"Profile_content__2qaVr\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"paddingTop10\":\"Posts_paddingTop10__3nRd2\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"Post_item__P2UQl\"};","import { useEffect, useState } from \"react\";\r\n\r\nconst ProfileStatusInfoWithHook = (props) => {\r\n    let [status, setStatus] = useState(props.status);\r\n    let [editMode, setEditMode] = useState(true);\r\n\r\n    useEffect(() => {\r\n        if (props.status) {\r\n            setStatus(props.status)\r\n        }\r\n    }, [props.status])\r\n\r\n    const changeEditMode = (flag) => {\r\n        setEditMode(flag);\r\n        if (flag)\r\n            props.updateUserStatus(status);\r\n    }\r\n    const updateStatus = (e) => {\r\n        setStatus(e.currentTarget.value);\r\n    }\r\n\r\n\r\n    return (\r\n        <>\r\n            {editMode\r\n                ?\r\n                <div>\r\n                    <span onDoubleClick={() => changeEditMode(false)}>{status ? status : '---------'}</span>\r\n                </div>\r\n                :\r\n                <div>\r\n                    <input onChange={updateStatus} onBlur={() => changeEditMode(true)} autoFocus={true} value={status} />\r\n                </div>\r\n            }\r\n        </>\r\n    );\r\n}\r\n\r\nexport default ProfileStatusInfoWithHook","import { Field, reduxForm } from 'redux-form';\r\nimport { Input } from '../../Common/FormControls';\r\nimport css from './ProfileInfo.module.css'\r\n\r\nconst ProfileFormData = ({ handleSubmit, initialValues, error }) => {\r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n            <div>\r\n                <b>Full name:</b>\r\n                <Field component={Input} placeholder=\"Full name\" id=\"fullName\" name=\"name\" validate={[]} />\r\n            </div>\r\n            <div>\r\n                <b>Country: </b>\r\n                <Field component={Input} placeholder=\"Country\" id=\"country\" name=\"location.country\" validate={[]} />\r\n            </div>\r\n            <div>\r\n                <b>City: </b>\r\n                <Field component={Input} placeholder=\"City\" id=\"city\" name=\"location.city\" validate={[]} />\r\n            </div>\r\n            <div>\r\n                <b>Looking job: </b>\r\n                <Field component={Input} type={'checkbox'} id=\"isLookingForAJob\" name=\"isLookingForAJob\" validate={[]} />\r\n            </div>\r\n            <div>\r\n                <b>Resume: </b>\r\n                <Field component={Input} placeholder=\"Resume text\" id=\"resumeText\" name=\"resumeText\" validate={[]} />\r\n            </div>\r\n            <div className={css.contactsBlock}>\r\n                <b>Contacts: </b>\r\n                <div>\r\n                    {Object.keys(initialValues.userContacts).map(key => {\r\n                        return <Field key={key} component={Input} placeholder={key} id={key} name={\"userContacts.\" + key} validate={[]} />\r\n                    })}\r\n                </div>\r\n            </div>\r\n\r\n            <button>Save</button>\r\n            {error &&\r\n                <div className={css.errorBlock}>\r\n                    {error}\r\n                </div>\r\n            }\r\n        </form>\r\n    );\r\n}\r\n\r\nexport default reduxForm({\r\n    form: \"profile\"\r\n})(ProfileFormData);","import css from './ProfileInfo.module.css'\r\nimport avatar from '../../../www/images/avatar.png'\r\nimport ProfileStatusInfoWithHook from './ProfileStatusInfoWIthHook';\r\nimport { useState } from 'react';\r\nimport ProfileFormData from './ProfileDataForm';\r\n\r\n\r\nconst ProfileInfo = (props) => {\r\n\r\n  const [isEditMode, setEditMode] = useState(false);\r\n  const fileChoosen = (e) => {\r\n    props.saveAvatar(e.currentTarget.files[0]);\r\n  }\r\n\r\n  const onSubmit = (formdata) => {\r\n    let result = props.saveUser(formdata);\r\n    Promise.all([result])\r\n      .then((result) => {\r\n        if(result[0] !== 'error')\r\n          setEditMode(false);\r\n      });\r\n  }\r\n\r\n  return (\r\n    <div className={css.whiteText}>\r\n      <div>\r\n        <img src={props.profileInfo.photoUrl === '' ? avatar : props.profileInfo.photoUrl} className={css.userPhoto} />\r\n      </div>\r\n      {props.isOwner && <input type=\"file\" onChange={(e) => fileChoosen(e)} />}\r\n\r\n      <div className={css.profileGeneralInfo}>\r\n        {isEditMode\r\n          ? props.profileInfo.name && <ProfileFormData initialValues={props.profileInfo} setEditMode={() => setEditMode(false)} onSubmit={onSubmit} />\r\n          : props.profileInfo.name && <ProfileData profileInfo={props.profileInfo} isOwner={props.isOwner} setEditMode={() => setEditMode(true)} />\r\n        }\r\n        <div><b>Status: </b>\r\n          <ProfileStatusInfoWithHook status={props.profileInfo.status} updateUserStatus={props.updateUserStatus} />\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nconst Contact = ({ site, url }) => {\r\n  return (\r\n    <div><b>{site}: </b>{url}</div>\r\n  );\r\n}\r\n\r\nconst ProfileData = ({ profileInfo, isOwner, setEditMode }) => {\r\n  return (\r\n    <div>\r\n      <div>\r\n        <b>Full name:</b>{profileInfo.name}\r\n      </div>\r\n      <div>\r\n        <b>County: </b>{profileInfo.location.country}\r\n      </div>\r\n      <div>\r\n        <b>City: </b>{profileInfo.location.city}\r\n      </div>\r\n      <div>\r\n        <b>Looking job: </b>{profileInfo.IsLookingForAJob ? 'true' : 'false'}\r\n      </div>\r\n      {profileInfo.isLookingForAJob &&\r\n        <div>\r\n          <b>Resume: </b>{profileInfo.ResumeText}\r\n        </div>\r\n      }\r\n      <div className={css.contactsBlock}>\r\n        <b>Contacts: </b>\r\n        <div>\r\n          {Object.keys(profileInfo.userContacts).map(key => {\r\n            return <Contact key={key} site={key} url={profileInfo.userContacts[key]} />\r\n          })}\r\n        </div>\r\n      </div>\r\n\r\n      {isOwner && <button onClick={setEditMode}>Edit</button>}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ProfileInfo;","import css from './Post.module.css'\r\n\r\nconst Post = (props) => {\r\n  return (\r\n    <div className={css.item}>\r\n      <img src='https://banner2.cleanpng.com/20180920/yko/kisspng-computer-icons-portable-network-graphics-avatar-ic-5ba3c66df14d32.3051789815374598219884.jpg'/>\r\n      {props.text}\r\n      <div>\r\n        <span>like {props.likes}</span>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Post;","import css from './Posts.module.css'\r\nimport Post from './Post/Post'\r\nimport React from 'react'\r\nimport { Field, reduxForm } from 'redux-form'\r\nimport { required, maxLengthCreator } from '../../Common/Utils/Validators'\r\nimport { Textarea } from '../../Common/FormControls'\r\n\r\nconst maxLength10 = maxLengthCreator(10);\r\n\r\nconst PostForm = ({ handleSubmit }) => {\r\n  return (\r\n    <div>\r\n      <form onSubmit={handleSubmit}>\r\n        <div>\r\n          <Field name='newposttext' component={Textarea} validate={[required, maxLength10]} placeholder=\"New post\" />\r\n        </div>\r\n        <div>\r\n          <button>Add post</button>\r\n        </div>\r\n      </form>\r\n    </div>\r\n  );\r\n}\r\n\r\nconst ReduxPostForm = reduxForm({\r\n  form: 'post'\r\n})(PostForm);\r\n\r\nconst Posts = React.memo(({ posts, addPost }) => {\r\n  let postElements = posts.map(post => <Post text={post.text} likes={post.likes} key={post.id} />)\r\n\r\n  let onSubmit = (formData) => {\r\n    addPost(formData.newposttext);\r\n  }\r\n  return (\r\n    <div>\r\n      <div>\r\n        <ReduxPostForm onSubmit={onSubmit} />\r\n      </div>\r\n      <h3>My posts</h3>\r\n      <div className={css.paddingTop10}>\r\n        {postElements}\r\n      </div>\r\n    </div>\r\n  );\r\n});\r\n\r\nexport default Posts;\r\n","import { connect } from 'react-redux';\r\nimport { newPostActionCreator } from '../../../redux/profile-reducer'\r\nimport Posts from './Posts'\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    posts: state.profilePage.posts,\r\n  }\r\n}\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    addPost: (newposttext) => {\r\n      dispatch(newPostActionCreator(newposttext));\r\n    }\r\n  }\r\n}\r\nconst PostsContainer = connect(mapStateToProps, mapDispatchToProps)(Posts);\r\n\r\nexport default PostsContainer;","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport ProfileInfo from './ProfileInfo/ProfileInfo'\r\nimport { getUserProfile, setUsersProfile, updateUserStatus, saveAvatar, saveUser } from '../../redux/profile-reducer'\r\nimport Preloader from '../Common/Preloader/Preloader';\r\nimport { withRouter } from 'react-router-dom';\r\nimport { compose } from 'redux';\r\nimport css from './Profile.module.css'\r\nimport PostsContainer from './Posts/PostsContainer';\r\n\r\nclass ProfileContainer extends React.Component {\r\n  render() {\r\n    if (!this.getCurrentUserId())\r\n      this.props.history.push(\"/login\");\r\n\r\n    return (\r\n      <>\r\n        {\r\n          this.props.profile.isLoading ?\r\n            <Preloader /> :\r\n            <div className={css.content}>\r\n              <ProfileInfo isOwner={!this.props.match.params.userId}\r\n                profileInfo={this.props.profile.profileInfo}\r\n                updateUserStatus={this.props.updateUserStatus}\r\n                saveAvatar={this.props.saveAvatar} \r\n                saveUser={this.props.saveUser}/>\r\n              <PostsContainer />\r\n            </div>\r\n        }\r\n        <div>{this.props.a}</div>\r\n      </>\r\n    );\r\n  }\r\n\r\n  getCurrentUserId() {\r\n    return this.props.match.params.userId ? this.props.match.params.userId : this.props.userId;\r\n  }\r\n\r\n  loadUserProfile() {\r\n    let userId = this.getCurrentUserId();\r\n    if (!userId)\r\n      this.props.history.push(\"/login\");\r\n    else\r\n      this.props.getUserProfile(userId);\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.loadUserProfile();\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    this.props.setUsersProfile({});\r\n  }\r\n}\r\n\r\nlet mapStateToProps = (state) => {\r\n  return {\r\n    userId: state.auth.userId,\r\n    profile: state.profilePage\r\n  }\r\n}\r\n\r\nexport default compose(\r\n  withRouter,\r\n  connect(mapStateToProps, {\r\n    getUserProfile,\r\n    setUsersProfile,\r\n    updateUserStatus,\r\n    saveUser,\r\n    saveAvatar\r\n  })\r\n)(ProfileContainer);"],"sourceRoot":""}